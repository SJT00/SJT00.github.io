{"data":{"allMarkdownRemark":{"nodes":[{"frontmatter":{"title":"Whats in a barbershop?","date":"Apr 14,25"},"fields":{"slug":"/yaman/2025-04-14-whats-in-a-barbershop?"},"rawMarkdownBody":"\n# Whats in a barbershop?\n\nAfter many years of having lost my favourite barber - Don't worry, he's still alive just no idea where -, I finally found a new one to my liking. [Yaman Barber](https://g.co/kgs/KthPKET), a recently open local barbershop has just the right level of creativity and experience to know what I want without much being said. Due to the infancy of his business and the titular owners genuine kindness on my first visit, I wanted to help in whatever way I could (I'm not losing a barber again!!). So as a fun challenge and service I offered to develop his business and booking website, with the condition of being paid with a lifetime supply of free haircuts. He agreed and so its time to build!\n\nCurrently he has a default free square website which offers good integration with his Square POS but not much else as he would need to upgrade for something more personalized and aesthetic.\n\nTake a look here:\n![The current site!](https://res.cloudinary.com/dk5bzqz4o/image/upload/v1744654218/YamanPrevSite_njjcti.gif)\n\nHe was mainly unhappy with the its lack of icons, a gallery or a calendar view. Due to a lack of experience with web products, and not being comfortable with English yet, he's had a hard time looking for alternatives.\n\nNote: Due to the considerable language barrier, I have to rely on understanding his design vision based off of very little, giving me more creative liberty but also a larger platform to fail from.\n\nWhich brings us to the system design portion of this project, I'll be following the [hello interview model](https://www.hellointerview.com/learn/system-design/in-a-hurry/delivery).\n\n### Requirements:\n\n- Functional:\n  - Customers should be able to book time-slots and service.\n  - Admin should be able to add/edit services offered and related prices.\n  - Admin should be able to set barber's time-slots and availability.\n  - Admin should be able to view a calendar view detailing all currently working barbers, their open and booked slots (plus slot relevant detail, what service respective barber is doing, to whom etc.).\n- Non Functional:\n\n  - Consistency >> Availability, customers should never be able to book unavailable slots, or have overlapping bookings.\n  - Read >> Write, data will be more frequently read as barbers check for any new bookings, or customers for time-slot availability.\n  - Certain holidays may have a burst of more customers, like Eid, Easter, etc. System should be able to keep up with occasional spikes.\n  - Customer information doesn't require permanence, we only need their name and contact info until the end of their appointment, after which it may be dumped to free up space.\n  - However, barber and services info needs to persist until revoked.\n  - Perhaps the most crucial detail, **THIS SHOULD ALL BE FREE** relying on free tier of cloud platforms that allow for commercial use. Ideally I want to avoid even freemium tier services, as I wish to be able to host this without ever entering my bank information anywhere! This is why I will be deleting user info as we don't need users to login just basic contact info.\n\n-      Outside of System Design:\n      - Customers should be able to view shop website and view instagram portfolio, and contact info.\n\n#### Calculations:\n\nI believe some back of the envelope calculations are relevant here, since usually in interviews these are distributed systems with extreme loads, but my case is almost exactly the opposite. We are servicing one shop at one location, with limited clientele, estimating the small scale of this could be very useful in allowing me to know what I can use for free compute.\n\nYaman's currently has 2 barbers, and we can over estimate 20 unique daily customers. Each customer makes one booking once a day and we can estimate 20% of them edit or cancel their bookings a day. This would amount to:\n\n    = 20*1.2 = 24 += 6 (accounting for barber/admin writes, availability/service changes etc.)\n    = 30 Writes Daily\n\nFor reads we can assume a customer reads 3 times a day, repetitively checking for available slots. While barbers read to see their schedule updates every 30 minutes in a 12 hr work day.\n\n    = 20*3 + 12*(60/30) = 60 + 24 = 84 Reads Daily\n\nFor booked slots we need to store the time-slot, barber id, customer name, contact info (email and/or number), and chosen service <<1kB so << 20kB daily stored blocks, <<600kB monthly. Note: this 600kB is given we don't dump user info daily, in reality persisted storage will never exceed 20kB if we dump daily.\n\nThis numbers are so small in-fact that could use in memory storage as my main database and don't even need distributed system thinking. Plus plenty of free cloud providers, specifically [Supabase](https://supabase.com/) offer much more than the needed level of service.\n\n### Core Entities:\n\nLets see in terms of schemas I think I can avoid storing customers as a separate entry. We don't need them outside of their booked appointments, there are no saved accounts all we need for users is a way to book appointments, cancel them and move them. Funnily enough I think this might give us GDPR compliance without even trying (Right of Erasure).\n\nBarber's info will be needed and needs to be editable, allowing for adjustments to schedule and removing/adding new barbers. Similarly for services which might change in pricing or get edited.\n\n#### Time-Slot\n\n- Time Range (start, end, duration)\n- Barber ID\n- IF Booked:\n  - Service ID\n  - Customer Name & Email\n  - External Reference (Used in callback to edit/cancel said time-slot appointment)\n\n#### Barber\n\n- Name\n- Contact Info\n- Unavailability (Subtractive list of Time Ranges, when not working)\n\n#### Services\n\n- Name\n- Price\n- Duration\n\n### API:\n\nNote: {ids} will be in request headers, added to endpoints below for visualizing RESTful layout.\n\n    ----------- BARBER -----------\n    GET /barber/{barber-id} --> <Barber>\n\n    PATCH /barber/{barber-id}\n    {\n       ...Partial<Barber>\n    }\n\n    POST /barber -->  barber-id\n    {\n       name,\n       contact-info,\n       unavailability-array?\n    }\n\n    DELETE /barber/{barber-id}\n\n    ----------- Time-Slot -----------\n\n    GET /time-slot/{time-slot-id} --> <Time-Slot>\n\n    PATCH /time-slot/{time-slot-id}\n    {\n        ...Partial<Time-Slot>\n    }\n\n    POST /time-slot --> (time-slot-id, external-ref)\n    {\n       time-range,\n       barber-id,\n       service-id,\n       customer-info\n    }\n\n    DELETE /time-slot/{time-slot-id}\n\n    ----------- Services -----------\n\n    GET /services/{service-id} --> <Service>\n\n    POST /services --> service-id\n    {\n       service-name\n       price\n       duration\n    }\n\n    PATCH /services/{service-id}\n    {\n       ...Partial<Service>\n    }\n\n    DELETE /services/{service-id}\n\n### High Level:\n\n- Off the bat I know I want [Redis](http://redis.io/about/) for locking booking slots to prevent double books. I'll be using [Upstash's](https://upstash.com/) free tier as my Redis host as I am well under their size and bandwidth limits.\n- Due to the small size and limited traffic I can afford to go server-less without paying for it particularly by utilizing [NextJS](https://nextjs.org/) across the stack, which helps my development experience too.\n- I'll be relying on a PostgreSQL Supabase database, as I want atomicity and a single source of truth.\n- I don't plan on adding payment for now, this will be done in store. In the future I **_may_** add square integration as thats what Yaman relies on.\n\n![The System Design Diagram for this App](https://res.cloudinary.com/dk5bzqz4o/image/upload/v1744656443/Yaman_Sys_Design_oavtgg.png)\n\n### Deep Dive:\n\n- I'll be using Redis as both a lock check and a caching layer, every call to the db will first check in the Redis store, if not found it will check the main DB and write to the store for future reference. This will require some anti-staleness logic that I need to iron out.\n- I will be hosting on [Cloudflare](https://www.cloudflare.com/) and utilizing their integration with NextJS to have my frontend on their extremely fast CDN, and my backend on their Workers (This should all fit comfortably within their free tier). They also provide good DDOS protection which is a great bonus.\n\n### Next Steps:\n\n- [ ] Design the needed views:\n  - [x] Landing Page\n  - [x] Booking Page\n  - [x] Calendar Page\n  - [ ] Admin\\* Page\n- [ ] Render above designs in React, working with mock API data:\n  - [x] Landing\n  - [ ] Booking\n  - [x] Calendar\n  - [ ] Admin\\*\n- [ ] Write up the SQL Schemas and host it on Supabase:\n  - [ ] Services\n  - [ ] Barbers\n  - [ ] Time-Slots\n- [ ] Complete the API layer:\n  - [ ] Setup Redis Layer\n  - [ ] Services\n  - [ ] Barbers\n  - [ ] Time-Slots\n  - [ ] Test with DB\n- [ ] Transition to Cloudflare hosting with their CDN and Workers\n- [ ] TEST, Test, test....\n- [ ] Present:\n  - [ ] Give a demo to Yaman\n  - [ ] Transition from current website\n  - [ ] Get a free haircut for dad and I ‚ò∫Ô∏è\n\n\\*I'm debating the implementation of an Admin page mainly due to wanting to save on design and development time. The underlying api routes are more important than a frontend, and I could act as the default admin and add/remove barbers and services as need be unless Yaman requests over full-control.\n\nAt the time of writing I am working on finishing the front-end from Points `1` and `2`, with some pages done, the others are designed on [Canva](https://www.canva.com/) but need to be implemented. I'll be posting with more done within this week and hope to wrap this up quickly as my hairs starting to grow pretty long again üòÇ\n"},{"frontmatter":{"title":"Hello World","date":"Apr 10,25"},"fields":{"slug":"/2025-04-10-hello-world"},"rawMarkdownBody":"\n# Hello World?\n\nFor the first of (hopefully) many entries, I'll be covering how I integrating these logs into my website.\n\nThe structure of these reports will remain fluid for a bit as I identify patterns in my chain of thought and can hopefully make it more formulaic.\n\nFor now I've settled on starting from requirements, dictating the process and identifying flaws and improvements.\n\n### Requirements:\n\n1.  Be able to write dev logs without having to worry about HTML or styling, in a format that is simple and quick to write.\n2.  Be able to still add images, diagrams, bullet points etc. when needed similar to writing any word doc.\n3.  Ensure logs are inline with my theme, in terms of font, colours, and styling etc. without per log adjustments.\n4.  Have writing dev logs be decoupled from other website functionality. To the point where a non-technical person should be able to edit/submit one.\n5.  Find a creative and aesthetically pleasing (at least to me) way to display multiple selectable logs from a list.\n\n### Process:\n\nPoints `1` and `2` immediately made me think of [**Markdown**](https://en.wikipedia.org/wiki/Markdown), its basically writing a text document with a little bit of needed flourish. Its simple enough for a non dev to write, and practically a given for quickly writing documentation on the web.\n\nPoint `3` required that I transform the Markdown **`.md`** format to an HTML friendly one and then apply the same styling that I use for all my components. [React Markdown](https://github.com/remarkjs/react-markdown) already handles conversion to HTML tags, and styling gets applied to those automatically, this was incredibly plug and play.\n\nPoint `4` was in the trickiest and most critical of the bunch, mainly because there are a lot of options to choose from here, do I use an external repo to store dev logs and fetch from there? Perhaps I use a Markdown CMS that is hosted elsewhere allowing me to edit and push in one go. For now I've settled on making a separate dev logs folder, which Gatsby - The React Framework this site is built on - statically queries at build time, allowing for quick retrieval at runtime. I may use this folder to store relevant media files as well, but I hesitate to do this for now, as I can rely on urls to fetch media while not having to host it myself. I decided on not using a separate repo mainly due to not wanting a public repo with just my blog posts (for now), mainly because I like to keep my git projects limited.\n\nPoint `5` required some creative thinking, but in a moment of serendipity I recalled a technical assessment I was given. The assessment was to make api calls to read repetitively from a file streams, for the sake of rendering a \"file tree\" (The file and folder structure you see to the right of a directory, allowing you to view and access multiple files from the left and view the files content on the right) . This was it! A file tree offers both a easily graspable way to select and view different files, while simultaneously displaying its contents in a code editor like fashion. To accomplish this I used a handy and easily stylized [react-accessible-treeview](https://www.npmjs.com/package/react-accessible-treeview) component along with some state management to incorporate this. Then I use the previously mentioned React Markdown to render the right side of the view and ta-da! we have a vscode clone.\n\n> TODO: Add an image for above, use the explanatory text as alt text\n\nThe overall solution required me to learn more about Gatsby, format GraphQL queries, use said queries to abstract and formulate a file tree, and then display said tree and its elements via React state. The abstraction comes from wanting the file tree to be able to read the dev logs folder and copy over its internals in an identical fashion (for markdown files and their ancestors at least).\n\nSo an external non tech-savy editor could modify the dev logs folders and they should still be correctly ordered and displayed.\n\n### Major Flaws:\n\n- No pagination, at build time Gatsby is fetching all the files in /devlogs, ordering them and including it in the bundle it sends to the client upon entering this page, _could be horrible for client-side memory as folder size grows_.\n- My styling preference for this website is to keep consistent limited size components. So for example: the right folder tree doesn't ever go beyond its starting width, similar for the left text view. However for deeper folder structures horizontal scrolling might be an issue, similarly for longer text it maybe be annoying to scroll through (saving scroll position locally could be a good temp solution).\n- Some form of lazy loading may be needed if I rely on urls to load media etc.\n\n### Future Plans:\n\n- [ ] Find a storage solution for media, maybe Google drive or Cloudinary?\n- [ ] Integrate cards in showcase with this section by adding a button on the relevant card that scrolls the relevant dev logs folder into view.\n- [x] For the above add a way to use uri ecnoding to directly go to relevant dev log, allowing quick links for future references in a format like `SiteURL/#devlog:{name}`.\n- [ ] Add a contact me button somewhere for any curious bystanders.\n- [ ] Measure and compare performance of this page in general and this section in particular.\n- [ ] Maybe... just maybe setup some kind of CI for online Markdown editor to allow for not even needing to push to git repo\n"}]}}}