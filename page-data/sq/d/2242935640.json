{"data":{"allMarkdownRemark":{"nodes":[{"frontmatter":{"title":"Jumping back in time","date":"Apr 10, 25"},"fields":{"slug":"/minipad/2025-04-10-second-log/"},"rawMarkdownBody":"\n# Markdown: Syntax\n\n- [Overview](#overview)\n  - [Philosophy](#philosophy)\n  - [Inline HTML](#html)\n  - [Automatic Escaping for Special Characters](#autoescape)\n- [Block Elements](#block)\n  - [Paragraphs and Line Breaks](#p)\n  - [Headers](#header)\n  - [Blockquotes](#blockquote)\n  - [Lists](#list)\n  - [Code Blocks](#precode)\n  - [Horizontal Rules](#hr)\n- [Span Elements](#span)\n  - [Links](#link)\n  - [Emphasis](#em)\n  - [Code](#code)\n  - [Images](#img)\n- [Miscellaneous](#misc)\n  - [Backslash Escapes](#backslash)\n  - [Automatic Links](#autolink)\n\n**Note:** This document is itself written using Markdown; you\ncan [see the source for it by adding '.text' to the URL](/projects/markdown/syntax.text).\n\n---\n\n## Overview\n\n### Philosophy\n\nMarkdown is intended to be as easy-to-read and easy-to-write as is feasible.\n\nReadability, however, is emphasized above all else. A Markdown-formatted\ndocument should be publishable as-is, as plain text, without looking\nlike it's been marked up with tags or formatting instructions. While\nMarkdown's syntax has been influenced by several existing text-to-HTML\nfilters -- including [Setext](http://docutils.sourceforge.net/mirror/setext.html), [atx](http://www.aaronsw.com/2002/atx/), [Textile](http://textism.com/tools/textile/), [reStructuredText](http://docutils.sourceforge.net/rst.html),\n[Grutatext](http://www.triptico.com/software/grutatxt.html), and [EtText](http://ettext.taint.org/doc/) -- the single biggest source of\ninspiration for Markdown's syntax is the format of plain text email.\n\n## Block Elements\n\n### Paragraphs and Line Breaks\n\nA paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing but spaces or tabs is considered\nblank.) Normal paragraphs should not be indented with spaces or tabs.\n\nThe implication of the \"one or more consecutive lines of text\" rule is\nthat Markdown supports \"hard-wrapped\" text paragraphs. This differs\nsignificantly from most other text-to-HTML formatters (including Movable\nType's \"Convert Line Breaks\" option) which translate every line break\ncharacter in a paragraph into a `<br />` tag.\n\nWhen you _do_ want to insert a `<br />` break tag using Markdown, you\nend a line with two or more spaces, then type return.\n\n### Headers\n\nMarkdown supports two styles of headers, [Setext] [1] and [atx] [2].\n\nOptionally, you may \"close\" atx-style headers. This is purely\ncosmetic -- you can use this if you think it looks better. The\nclosing hashes don't even need to match the number of hashes\nused to open the header. (The number of opening hashes\ndetermines the header level.)\n\n### Blockquotes\n\nMarkdown uses email-style `>` characters for blockquoting. If you're\nfamiliar with quoting passages of text in an email message, then you\nknow how to create a blockquote in Markdown. It looks best if you hard\nwrap the text and put a `>` before every line:\n\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n>\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n> id sem consectetuer libero luctus adipiscing.\n\nMarkdown allows you to be lazy and only put the `>` before the first\nline of a hard-wrapped paragraph:\n\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n> id sem consectetuer libero luctus adipiscing.\n\nBlockquotes can be nested (i.e. a blockquote-in-a-blockquote) by\nadding additional levels of `>`:\n\n> This is the first level of quoting.\n>\n> > This is nested blockquote.\n>\n> Back to the first level.\n\nBlockquotes can contain other Markdown elements, including headers, lists,\nand code blocks:\n\n> ## This is a header.\n>\n> 1.  This is the first list item.\n> 2.  This is the second list item.\n>\n> Here's some example code:\n>\n>     return shell_exec(\"echo $input | $markdown_script\");\n\nAny decent text editor should make email-style quoting easy. For\nexample, with BBEdit, you can make a selection and choose Increase\nQuote Level from the Text menu.\n\n### Lists\n\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.\n\nUnordered lists use asterisks, pluses, and hyphens -- interchangably\n-- as list markers:\n\n- Red\n- Green\n- Blue\n\nis equivalent to:\n\n- Red\n- Green\n- Blue\n\nand:\n\n- Red\n- Green\n- Blue\n\nOrdered lists use numbers followed by periods:\n\n1.  Bird\n2.  McHale\n3.  Parish\n\nIt's important to note that the actual numbers you use to mark the\nlist have no effect on the HTML output Markdown produces. The HTML\nMarkdown produces from the above list is:\n\nIf you instead wrote the list in Markdown like this:\n\n1.  Bird\n1.  McHale\n1.  Parish\n\nor even:\n\n3. Bird\n1. McHale\n1. Parish\n\nyou'd get the exact same HTML output. The point is, if you want to,\nyou can use ordinal numbers in your ordered Markdown lists, so that\nthe numbers in your source match the numbers in your published HTML.\nBut if you want to be lazy, you don't have to.\n\nTo make lists look nice, you can wrap items with hanging indents:\n\n- Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n  Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n  viverra nec, fringilla in, laoreet vitae, risus.\n- Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n  Suspendisse id sem consectetuer libero luctus adipiscing.\n\nBut if you want to be lazy, you don't have to:\n\n- Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n  Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n  viverra nec, fringilla in, laoreet vitae, risus.\n- Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n  Suspendisse id sem consectetuer libero luctus adipiscing.\n\nList items may consist of multiple paragraphs. Each subsequent\nparagraph in a list item must be indented by either 4 spaces\nor one tab:\n\n1.  This is a list item with two paragraphs. Lorem ipsum dolor\n    sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n    mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n    sit amet velit.\n\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n\nIt looks nice if you indent every line of the subsequent\nparagraphs, but here again, Markdown will allow you to be\nlazy:\n\n- This is a list item with two paragraphs.\n\n      This is the second paragraph in the list item. You're\n\n  only required to indent the first line. Lorem ipsum dolor\n  sit amet, consectetuer adipiscing elit.\n\n- Another item in the same list.\n\nTo put a blockquote within a list item, the blockquote's `>`\ndelimiters need to be indented:\n\n- A list item with a blockquote:\n\n  > This is a blockquote\n  > inside a list item.\n\nTo put a code block within a list item, the code block needs\nto be indented _twice_ -- 8 spaces or two tabs:\n\n- A list item with a code block:\n\n      <code goes here>\n\n### Code Blocks\n\nPre-formatted code blocks are used for writing about programming or\nmarkup source code. Rather than forming normal paragraphs, the lines\nof a code block are interpreted literally. Markdown wraps a code block\nin both `<pre>` and `<code>` tags.\n\nTo produce a code block in Markdown, simply indent every line of the\nblock by at least 4 spaces or 1 tab.\n\nThis is a normal paragraph:\n\n    This is a code block.\n\nHere is an example of AppleScript:\n\n    tell application \"Foo\"\n        beep\n    end tell\n\nA code block continues until it reaches a line that is not indented\n(or the end of the article).\n\nWithin a code block, ampersands (`&`) and angle brackets (`<` and `>`)\nare automatically converted into HTML entities. This makes it very\neasy to include example HTML source code using Markdown -- just paste\nit and indent it, and Markdown will handle the hassle of encoding the\nampersands and angle brackets. For example, this:\n\n    <div class=\"footer\">\n        &copy; 2004 Foo Corporation\n    </div>\n\nRegular Markdown syntax is not processed within code blocks. E.g.,\nasterisks are just literal asterisks within a code block. This means\nit's also easy to use Markdown to write about Markdown's own syntax.\n\n```\ntell application \"Foo\"\n    beep\nend tell\n```\n\n## Span Elements\n\n### Links\n\nMarkdown supports two style of links: _inline_ and _reference_.\n\nIn both styles, the link text is delimited by [square brackets].\n\nTo create an inline link, use a set of regular parentheses immediately\nafter the link text's closing square bracket. Inside the parentheses,\nput the URL where you want the link to point, along with an _optional_\ntitle for the link, surrounded in quotes. For example:\n\nThis is [an example](http://example.com/) inline link.\n\n[This link](http://example.net/) has no title attribute.\n\n### Emphasis\n\nMarkdown treats asterisks (`*`) and underscores (`_`) as indicators of\nemphasis. Text wrapped with one `*` or `_` will be wrapped with an\nHTML `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML\n`<strong>` tag. E.g., this input:\n\n_single asterisks_\n\n_single underscores_\n\n**double asterisks**\n\n**double underscores**\n\n### Code\n\nTo indicate a span of code, wrap it with backtick quotes (`` ` ``).\nUnlike a pre-formatted code block, a code span indicates code within a\nnormal paragraph. For example:\n\nUse the `printf()` function.\n"},{"frontmatter":{"title":"Hello World","date":"Apr 10, 25"},"fields":{"slug":"/2025-04-10-hello-world/"},"rawMarkdownBody":"\n# Whats in a Dev Logger?\n\nFor my first dev log I'll be covering how I integrating these logs into my website. \n\n### Requirements:\n 1. Be able to write dev logs without having to worry about HTML or styling, in a format that is simple and quick to write. \n 2. Be able to still add images, diagrams, bullet points etc. when needed similar to writing any word doc.\n 3. Ensure logs are inline with my theme, in terms of font, colours, and styling etc. without per log adjustments. \n 4. Have writing dev logs be decoupled from other website functionality. To the point where a non-technical person should be able to edit/submit one.\n 5. Find a creative and aesthetically pleasing (at least to me) way to display multiple selectable logs from a list.\n\n### Process:\nPoints `1` and `2` immediately made me think of [**Markdown**](https://en.wikipedia.org/wiki/Markdown), its basically writing a text document with a little bit of needed flourish. Its simple enough for a non dev to write, and practically a given for quickly writing documentation on the web.\n\nPoint `3` required that I transform the Markdown **`.md`** format to an HTML friendly one and then apply the same styling that I use for all my components. [React Markdown](https://github.com/remarkjs/react-markdown) already handles conversion to HTML tags, and styling gets applied to those automatically, quite an easy fix :)\n\nPoint `4` was in the trickiest and most critical of the bunch, mainly because there are a lot of options to choose from here, do I use an external repo to store dev logs and fetch from there? Perhaps I use a Markdown CMS that is hosted elsewhere allowing me to edit and push in one go. For now I've settled on making a separate dev logs folder, which Gatsby - The React Framework this site is built on - statically queries at build time, allowing for quick retrieval at runtime. I may use this folder to store relevant media files as well, but I hesitate to do this for now, as I can rely on urls to fetch media while not having to host it myself. I decided on not using a separate repo mainly due to not wanting a public repo with just my blog posts (for now), mainly because I like to keep my git projects limited.\n\nPoint `5` required some creative thinking, but in a moment of serendipity I recalled a technical assessment I was given. The assessment was to make api calls to read repetitively from a file streams, for the sake of rendering a \"file tree\" (The file and folder structure you see to the right of a directory, allowing you to view and access multiple files from the left and view the files content on the right) . This was it! A file tree offers both a easily graspable way to select and view different files, while simultaneously displaying its contents. To accomplish this I used a handy and easily stylized [react-accessible-treeview](https://www.npmjs.com/package/react-accessible-treeview) component along with some state management to incorporate this.\n\n> TODO: Add an image for above, use the explanatory text as alt text\n\n\nThe overall solution required me to learn more about Gatsby, format GraphQL queries, use said queries to abstract and formulate a file tree, and then display said tree and its elements via React state. The abstraction comes from wanting the file tree to be able to read the dev logs folder and copy over its internals in an identical fashion (for markdown files and their parent folders at least). \n\nSo in theory an external non tech-savy editor could modify the dev logs folders and they should still be correctly ordered and displayed.\n\n### Major Flaws:\n\n - No pagination, at build time Gatsby is fetching all the files in /devlogs, ordering them and including it in the bundle it sends to the client upon entering this page, _could be horrible for client-side memory as folder size grows_.\n - My styling preference for this website is to keep consistent limited size components. So for example: the right folder tree doesn't ever go beyond its starting width, similar for the left text view. However for deeper folder structures horizontal scrolling might be an issue, similarly for longer text it maybe be annoying to scroll through (saving scroll position locally could be a good temp solution).\n - Some form of lazy loading may be needed if I rely on urls to load media etc.\n\n### Future Plans:\n\n - [ ] Find a storage solution for media, maybe Google drive or Cloudinary?\n - [ ] Integrate cards in showcase with this section by adding a button on the relevant card that scrolls the relevant dev logs folder into view.\n - [ ] For above add a way to use url id `#devlog/${name}` to directly go to relevant dev log, allowing quick links for future referral.\n - [ ] Add a contact me button somewhere for any curious bystanders.\n - [ ] Measure and compare performance of this page in general and this section in particular.\n - [ ] Maybe... just maybe setup some kind of CI for online Markdown editor to allow for not even needing to push to git repo\n"},{"frontmatter":{"title":"Started the new rendering system","date":"Apr 9, 25"},"fields":{"slug":"/yamans/2025-04-09-first-log/"},"rawMarkdownBody":"\n# Markdown syntax guide\n\n## Headers\n\n# This is a Heading h1\n\n## This is a Heading h2\n\n###### This is a Heading h6\n\n## Emphasis\n\n_This text will be italic_  \n_This will also be italic_\n\n**This text will be bold**  \n**This will also be bold**\n\n_You **can** combine them_\n\n## Lists\n\n### Unordered\n\n- Item 1\n- Item 2\n- Item 2a\n- Item 2b\n  - Item 3a\n  - Item 3b\n\n### Ordered\n\n1. Item 1\n2. Item 2\n3. Item 3\n   1. Item 3a\n   2. Item 3b\n\n## Images\n\n![This is an alt text.](https://2.img-dpreview.com/files/p/E~C1000x0S4000x4000T1200x1200~articles/3925134721/0266554465.jpeg \"This is a sample image.\")\n\n## Links\n\nYou may be using [Markdown Live Preview](https://markdownlivepreview.com/).\n\n## Blockquotes\n\n> Markdown is a lightweight markup language with plain-text-formatting syntax, created in 2004 by John Gruber with Aaron Swartz.\n>\n> > Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.\n\n## Tables\n\n| Left columns | Right columns |\n| ------------ | :-----------: |\n| left foo     |   right foo   |\n| left bar     |   right bar   |\n| left baz     |   right baz   |\n\n## Blocks of code\n\n```\nlet message = 'Hello world';\nalert(message);\n```\n\n## Inline code\n\nThis web site is using `markedjs/marked`.\n"}]}}}